{"ast":null,"code":"var _jsxFileName = \"/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Hangman.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport data from './data.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateWords(w, notLetters) {\n  if (w.length > 0) {\n    const words = data.words;\n    let wordsFnd = [];\n    var no_letters_pattern;\n    if (notLetters.length < 1) {\n      no_letters_pattern = new RegExp(\"^[^]*$\");\n    } else {\n      no_letters_pattern = new RegExp(\"^[^\" + notLetters.toUpperCase() + \"]*$\");\n    }\n    var pattern = new RegExp(w.toUpperCase(), 'g');\n    for (let i = 0; i < words.length; i++) {\n      if (words[i].match(pattern) != null && words[i].match(pattern)[0].length == words[i].length && words[i].toUpperCase().match(no_letters_pattern) != null) {\n        const word = words[i][0].toUpperCase() + words[i].slice(1, words[i].length).toLowerCase();\n        wordsFnd.push(word);\n      } else {}\n    }\n    return wordsFnd;\n  }\n}\nfunction Hangman() {\n  _s();\n  const [word, setWord] = useState(\"\");\n  const [notLetters, setNotLetters] = useState(\"\");\n  const ChangeValue = event => {\n    setWord(event.target.value);\n  };\n  const ChangeNotLetter = event => {\n    setNotLetters(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"element\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"This game is to see available choices for your hangman round. Replace missing letters with dots. If there are letters that are not in the word, make sure to put it in the second input box and don't seperate each letter with a comma: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Your word: \",\n      value: word,\n      onChange: ChangeValue,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Letters that are not in the word:\",\n      value: notLetters,\n      onChange: ChangeNotLetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: generateWords(word, notLetters).map((w, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: w\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(Hangman, \"WTwrkC9Eoyr6gXQ0dD8MtIYh6Bo=\");\n_c = Hangman;\nexport default Hangman;\nvar _c;\n$RefreshReg$(_c, \"Hangman\");","map":{"version":3,"names":["useState","data","jsxDEV","_jsxDEV","generateWords","w","notLetters","length","words","wordsFnd","no_letters_pattern","RegExp","toUpperCase","pattern","i","match","word","slice","toLowerCase","push","Hangman","_s","setWord","setNotLetters","ChangeValue","event","target","value","ChangeNotLetter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","autoFocus","map","_c","$RefreshReg$"],"sources":["/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Hangman.js"],"sourcesContent":["import { useState } from \"react\";\nimport data from './data.json'\n\n\n\nfunction generateWords(w, notLetters) {\n    if (w.length > 0) {\n        const words = data.words;\n        let wordsFnd = [];\n        var no_letters_pattern;\n        if (notLetters.length < 1) {\n\n            no_letters_pattern = new RegExp(\"^[^]*$\");\n        } else {\n            no_letters_pattern = new RegExp(\"^[^\" + notLetters.toUpperCase() + \"]*$\");\n        }\n        var pattern = new RegExp(w.toUpperCase(), 'g');\n        for (let i = 0; i < words.length; i++) {\n\n\n\n            if (words[i].match(pattern) != null && words[i].match(pattern)[0].length == words[i].length && words[i].toUpperCase().match(no_letters_pattern) != null) {\n                const word = words[i][0].toUpperCase() + words[i].slice(1, words[i].length).toLowerCase();\n                wordsFnd.push(word)\n            } else {\n\n            }\n\n\n        }\n        return wordsFnd;\n    }\n}\n\nfunction Hangman() {\n\n    const [word, setWord] = useState(\"\")\n    const [notLetters, setNotLetters] = useState(\"\")\n    const ChangeValue = (event) => {\n        setWord(event.target.value);\n\n    }\n\n    const ChangeNotLetter = (event) => {\n        setNotLetters(event.target.value);\n    }\n\n    return (\n        <div className=\"element\">\n            <h1>This game is to see available choices for your hangman round. Replace missing letters with dots. If there are letters that are not in the word, make sure to put it in the second input box and don't seperate each letter with a comma: </h1>\n            <input placeholder=\"Your word: \" value={word} onChange={ChangeValue} autoFocus />\n            <br /><br />\n            <input placeholder=\"Letters that are not in the word:\" value={notLetters} onChange={ChangeNotLetter} />\n            <ul>\n                {generateWords(word, notLetters).map((w, i) => (\n                    <li key={i}>{w}</li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default Hangman; "],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAI9B,SAASC,aAAaA,CAACC,CAAC,EAAEC,UAAU,EAAE;EAClC,IAAID,CAAC,CAACE,MAAM,GAAG,CAAC,EAAE;IACd,MAAMC,KAAK,GAAGP,IAAI,CAACO,KAAK;IACxB,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,kBAAkB;IACtB,IAAIJ,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;MAEvBG,kBAAkB,GAAG,IAAIC,MAAM,CAAC,QAAQ,CAAC;IAC7C,CAAC,MAAM;MACHD,kBAAkB,GAAG,IAAIC,MAAM,CAAC,KAAK,GAAGL,UAAU,CAACM,WAAW,CAAC,CAAC,GAAG,KAAK,CAAC;IAC7E;IACA,IAAIC,OAAO,GAAG,IAAIF,MAAM,CAACN,CAAC,CAACO,WAAW,CAAC,CAAC,EAAE,GAAG,CAAC;IAC9C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,CAACD,MAAM,EAAEO,CAAC,EAAE,EAAE;MAInC,IAAIN,KAAK,CAACM,CAAC,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,IAAI,IAAI,IAAIL,KAAK,CAACM,CAAC,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACN,MAAM,IAAIC,KAAK,CAACM,CAAC,CAAC,CAACP,MAAM,IAAIC,KAAK,CAACM,CAAC,CAAC,CAACF,WAAW,CAAC,CAAC,CAACG,KAAK,CAACL,kBAAkB,CAAC,IAAI,IAAI,EAAE;QACrJ,MAAMM,IAAI,GAAGR,KAAK,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,CAACF,WAAW,CAAC,CAAC,GAAGJ,KAAK,CAACM,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,EAAET,KAAK,CAACM,CAAC,CAAC,CAACP,MAAM,CAAC,CAACW,WAAW,CAAC,CAAC;QACzFT,QAAQ,CAACU,IAAI,CAACH,IAAI,CAAC;MACvB,CAAC,MAAM,CAEP;IAGJ;IACA,OAAOP,QAAQ;EACnB;AACJ;AAEA,SAASW,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAEf,MAAM,CAACL,IAAI,EAAEM,OAAO,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,UAAU,EAAEiB,aAAa,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMwB,WAAW,GAAIC,KAAK,IAAK;IAC3BH,OAAO,CAACG,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAE/B,CAAC;EAED,MAAMC,eAAe,GAAIH,KAAK,IAAK;IAC/BF,aAAa,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACrC,CAAC;EAED,oBACIxB,OAAA;IAAK0B,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACpB3B,OAAA;MAAA2B,QAAA,EAAI;IAAyO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClP/B,OAAA;MAAOgC,WAAW,EAAC,aAAa;MAACR,KAAK,EAAEX,IAAK;MAACoB,QAAQ,EAAEZ,WAAY;MAACa,SAAS;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjF/B,OAAA;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAAA/B,OAAA;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACZ/B,OAAA;MAAOgC,WAAW,EAAC,mCAAmC;MAACR,KAAK,EAAErB,UAAW;MAAC8B,QAAQ,EAAER;IAAgB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvG/B,OAAA;MAAA2B,QAAA,EACK1B,aAAa,CAACY,IAAI,EAAEV,UAAU,CAAC,CAACgC,GAAG,CAAC,CAACjC,CAAC,EAAES,CAAC,kBACtCX,OAAA;QAAA2B,QAAA,EAAazB;MAAC,GAALS,CAAC;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CACtB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAACb,EAAA,CA1BQD,OAAO;AAAAmB,EAAA,GAAPnB,OAAO;AA4BhB,eAAeA,OAAO;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}