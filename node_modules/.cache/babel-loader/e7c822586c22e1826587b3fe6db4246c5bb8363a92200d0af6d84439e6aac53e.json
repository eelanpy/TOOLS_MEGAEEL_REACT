{"ast":null,"code":"var _jsxFileName = \"/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Number.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport data from './data.json';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import \"./App.css\"\n\n// function generateWords (w, notLetters) {\n//   w = w.toLowerCase()\n\n//   notLetters = notLetters.toLowerCase()\n//   var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n\n//   const words = data.words\n//   var wordsFnd = []\n//   var no_letters_pattern\n//   if (notLetters.length < 1) {\n//     no_letters_pattern = new RegExp('^[^]*$')\n//   } else {\n//     no_letters_pattern = new RegExp('^[^' + notLetters + ']*$')\n//   }\n//   var pattern = new RegExp(w, 'g')\n//   for (let i = 0; i < words.length; i++) {\n//     if (\n//       words[i].match(pattern) != null &&\n//       words[i].match(pattern)[0].length == words[i].length &&\n//       words[i].match(no_letters_pattern) != null\n//     ) {\n//       const word =\n//         words[i][0].toUpperCase() +\n//         words[i].slice(1, words[i].length).toLowerCase()\n//       wordsFnd.push(word)\n//     } else {\n//       // alert(\"Couldn't find it!\")\n//     }\n//   }\n\n//   return wordsFnd\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Number() {\n  _s();\n  const [max, setMax] = useState(0);\n  const [checked, setChecked] = useState(false);\n  const [radioValue, setRadioValue] = useState('1');\n  const radios = [{\n    name: '2000',\n    value: '2000'\n  }, {\n    name: '10001',\n    value: '100001'\n  }];\n  console.log(max);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n      children: radios.map((radio, idx) => /*#__PURE__*/_jsxDEV(ToggleButton, {\n        id: `radio-${idx}`,\n        type: \"radio\",\n        variant: \"outline-primary\",\n        name: \"radio\",\n        value: radio.value,\n        checked: radioValue === radio.value,\n        onChange: e => setRadioValue(e.currentTarget.value),\n        children: radio.name\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Number, \"LpWggSg5kDWk8fd8hhS6Q6yupYM=\");\n_c = Number;\nexport default Number;\nvar _c;\n$RefreshReg$(_c, \"Number\");","map":{"version":3,"names":["useState","data","Col","Form","Row","Container","ButtonGroup","ToggleButton","jsxDEV","_jsxDEV","Fragment","_Fragment","Number","_s","max","setMax","checked","setChecked","radioValue","setRadioValue","radios","name","value","console","log","children","map","radio","idx","id","type","variant","onChange","e","currentTarget","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Number.js"],"sourcesContent":["import { useState } from 'react'\nimport data from './data.json'\n\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\n\nimport Container from 'react-bootstrap/Container'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n// import \"./App.css\"\n\n// function generateWords (w, notLetters) {\n//   w = w.toLowerCase()\n\n//   notLetters = notLetters.toLowerCase()\n//   var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n\n//   const words = data.words\n//   var wordsFnd = []\n//   var no_letters_pattern\n//   if (notLetters.length < 1) {\n//     no_letters_pattern = new RegExp('^[^]*$')\n//   } else {\n//     no_letters_pattern = new RegExp('^[^' + notLetters + ']*$')\n//   }\n//   var pattern = new RegExp(w, 'g')\n//   for (let i = 0; i < words.length; i++) {\n//     if (\n//       words[i].match(pattern) != null &&\n//       words[i].match(pattern)[0].length == words[i].length &&\n//       words[i].match(no_letters_pattern) != null\n//     ) {\n//       const word =\n//         words[i][0].toUpperCase() +\n//         words[i].slice(1, words[i].length).toLowerCase()\n//       wordsFnd.push(word)\n//     } else {\n//       // alert(\"Couldn't find it!\")\n//     }\n//   }\n\n//   return wordsFnd\n// }\n\nfunction Number () {\n  const [max, setMax] = useState(0)\n  const [checked, setChecked] = useState(false)\n  const [radioValue, setRadioValue] = useState('1')\n\n  const radios = [\n    { name: '2000', value: '2000' },\n    { name: '10001', value: '100001' }\n  ]\n\n  console.log(max)\n\n  return (\n    <>\n      <ButtonGroup>\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            id={`radio-${idx}`}\n            type='radio'\n            variant='outline-primary'\n            name='radio'\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={e => setRadioValue(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n    </>\n  )\n}\n\nexport default Number\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,aAAa;AAE9B,OAAOC,GAAG,MAAM,qBAAqB;AACrC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,GAAG,MAAM,qBAAqB;AAErC,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAO,sCAAsC;AAC7C;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,SAASC,MAAMA,CAAA,EAAI;EAAAC,EAAA;EACjB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,GAAG,CAAC;EAEjD,MAAMoB,MAAM,GAAG,CACb;IAAEC,IAAI,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAO,CAAC,EAC/B;IAAED,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAS,CAAC,CACnC;EAEDC,OAAO,CAACC,GAAG,CAACV,GAAG,CAAC;EAEhB,oBACEL,OAAA,CAAAE,SAAA;IAAAc,QAAA,eACEhB,OAAA,CAACH,WAAW;MAAAmB,QAAA,EACTL,MAAM,CAACM,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,kBACrBnB,OAAA,CAACF,YAAY;QAEXsB,EAAE,EAAG,SAAQD,GAAI,EAAE;QACnBE,IAAI,EAAC,OAAO;QACZC,OAAO,EAAC,iBAAiB;QACzBV,IAAI,EAAC,OAAO;QACZC,KAAK,EAAEK,KAAK,CAACL,KAAM;QACnBN,OAAO,EAAEE,UAAU,KAAKS,KAAK,CAACL,KAAM;QACpCU,QAAQ,EAAEC,CAAC,IAAId,aAAa,CAACc,CAAC,CAACC,aAAa,CAACZ,KAAK,CAAE;QAAAG,QAAA,EAEnDE,KAAK,CAACN;MAAI,GATNO,GAAG;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUI,CACf;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS;EAAC,gBACd,CAAC;AAEP;AAACzB,EAAA,CAhCQD,MAAM;AAAA2B,EAAA,GAAN3B,MAAM;AAkCf,eAAeA,MAAM;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}