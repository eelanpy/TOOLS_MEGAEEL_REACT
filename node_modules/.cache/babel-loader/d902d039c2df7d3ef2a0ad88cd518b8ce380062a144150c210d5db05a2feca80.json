{"ast":null,"code":"var _jsxFileName = \"/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Number.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport data from './data.json';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import \"./App.css\"\n\n// function generateWords (w, notLetters) {\n//   w = w.toLowerCase()\n\n//   notLetters = notLetters.toLowerCase()\n//   var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n\n//   const words = data.words\n//   var wordsFnd = []\n//   var no_letters_pattern\n//   if (notLetters.length < 1) {\n//     no_letters_pattern = new RegExp('^[^]*$')\n//   } else {\n//     no_letters_pattern = new RegExp('^[^' + notLetters + ']*$')\n//   }\n//   var pattern = new RegExp(w, 'g')\n//   for (let i = 0; i < words.length; i++) {\n//     if (\n//       words[i].match(pattern) != null &&\n//       words[i].match(pattern)[0].length == words[i].length &&\n//       words[i].match(no_letters_pattern) != null\n//     ) {\n//       const word =\n//         words[i][0].toUpperCase() +\n//         words[i].slice(1, words[i].length).toLowerCase()\n//       wordsFnd.push(word)\n//     } else {\n//       // alert(\"Couldn't find it!\")\n//     }\n//   }\n\n//   return wordsFnd\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Number() {\n  _s();\n  const [max, setMax] = useState(0);\n  const [checked, setChecked] = useState(false);\n  const nums = [{\n    name: '2000',\n    value: 2000\n  }, {\n    name: '10001',\n    value: 10001\n  }, {\n    name: '1000',\n    value: 1000\n  }];\n  console.log(max);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pick a number:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), nums.map((num, idx) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ToggleButton, {\n        className: \"m-3\",\n        id: `radio-${idx}`,\n        type: \"radio\",\n        variant: \"outline-primary\",\n        name: \"radio\",\n        value: num.value,\n        checked: max === parseInt(num.value),\n        onChange: e => setMax(parseInt(e.currentTarget.value)),\n        children: num.name\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false))]\n  }, void 0, true);\n}\n_s(Number, \"PFOCHw1RYpHwrrP2bZDmBknB6/s=\");\n_c = Number;\nexport default Number;\nvar _c;\n$RefreshReg$(_c, \"Number\");","map":{"version":3,"names":["useState","data","Col","Form","Row","Container","ButtonGroup","ToggleButton","jsxDEV","_jsxDEV","Fragment","_Fragment","Number","_s","max","setMax","checked","setChecked","nums","name","value","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","num","idx","className","id","type","variant","parseInt","onChange","e","currentTarget","_c","$RefreshReg$"],"sources":["/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Number.js"],"sourcesContent":["import { useState } from 'react'\nimport data from './data.json'\n\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\n\nimport Container from 'react-bootstrap/Container'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n// import \"./App.css\"\n\n// function generateWords (w, notLetters) {\n//   w = w.toLowerCase()\n\n//   notLetters = notLetters.toLowerCase()\n//   var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n\n//   const words = data.words\n//   var wordsFnd = []\n//   var no_letters_pattern\n//   if (notLetters.length < 1) {\n//     no_letters_pattern = new RegExp('^[^]*$')\n//   } else {\n//     no_letters_pattern = new RegExp('^[^' + notLetters + ']*$')\n//   }\n//   var pattern = new RegExp(w, 'g')\n//   for (let i = 0; i < words.length; i++) {\n//     if (\n//       words[i].match(pattern) != null &&\n//       words[i].match(pattern)[0].length == words[i].length &&\n//       words[i].match(no_letters_pattern) != null\n//     ) {\n//       const word =\n//         words[i][0].toUpperCase() +\n//         words[i].slice(1, words[i].length).toLowerCase()\n//       wordsFnd.push(word)\n//     } else {\n//       // alert(\"Couldn't find it!\")\n//     }\n//   }\n\n//   return wordsFnd\n// }\n\nfunction Number () {\n  const [max, setMax] = useState(0)\n  const [checked, setChecked] = useState(false)\n\n  const nums = [\n    { name: '2000', value: 2000 },\n    { name: '10001', value: 10001 },\n    { name: '1000', value: 1000 }\n  ]\n\n  console.log(max)\n\n  return (\n    <>\n      <h1>Pick a number:</h1>\n\n      {nums.map((num, idx) => (\n        <>\n          <ToggleButton\n            key={idx}\n            className='m-3'\n            id={`radio-${idx}`}\n            type='radio'\n            variant='outline-primary'\n            name='radio'\n            value={num.value}\n            checked={max === parseInt(num.value)}\n            onChange={e => setMax(parseInt(e.currentTarget.value))}\n          >\n            {num.name}\n          </ToggleButton>\n        </>\n      ))}\n    </>\n  )\n}\n\nexport default Number\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,aAAa;AAE9B,OAAOC,GAAG,MAAM,qBAAqB;AACrC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,GAAG,MAAM,qBAAqB;AAErC,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAO,sCAAsC;AAC7C;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,SAASC,MAAMA,CAAA,EAAI;EAAAC,EAAA;EACjB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMkB,IAAI,GAAG,CACX;IAAEC,IAAI,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAK,CAAC,EAC7B;IAAED,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAM,CAAC,EAC/B;IAAED,IAAI,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAK,CAAC,CAC9B;EAEDC,OAAO,CAACC,GAAG,CAACR,GAAG,CAAC;EAEhB,oBACEL,OAAA,CAAAE,SAAA;IAAAY,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEtBT,IAAI,CAACU,GAAG,CAAC,CAACC,GAAG,EAAEC,GAAG,kBACjBrB,OAAA,CAAAE,SAAA;MAAAY,QAAA,eACEd,OAAA,CAACF,YAAY;QAEXwB,SAAS,EAAC,KAAK;QACfC,EAAE,EAAG,SAAQF,GAAI,EAAE;QACnBG,IAAI,EAAC,OAAO;QACZC,OAAO,EAAC,iBAAiB;QACzBf,IAAI,EAAC,OAAO;QACZC,KAAK,EAAES,GAAG,CAACT,KAAM;QACjBJ,OAAO,EAAEF,GAAG,KAAKqB,QAAQ,CAACN,GAAG,CAACT,KAAK,CAAE;QACrCgB,QAAQ,EAAEC,CAAC,IAAItB,MAAM,CAACoB,QAAQ,CAACE,CAAC,CAACC,aAAa,CAAClB,KAAK,CAAC,CAAE;QAAAG,QAAA,EAEtDM,GAAG,CAACV;MAAI,GAVJW,GAAG;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWI;IAAC,gBACf,CACH,CAAC;EAAA,eACF,CAAC;AAEP;AAACd,EAAA,CAnCQD,MAAM;AAAA2B,EAAA,GAAN3B,MAAM;AAqCf,eAAeA,MAAM;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}