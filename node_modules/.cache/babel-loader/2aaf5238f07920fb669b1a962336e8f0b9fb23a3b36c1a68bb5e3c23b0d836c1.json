{"ast":null,"code":"var _jsxFileName = \"/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Hangman.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport data from './data.json';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Row from 'react-bootstrap/Row';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar colorDict = {\n  3: '#6D3705',\n  2: '#D1F2B3',\n  10: '#9955E7',\n  16: '#716EA1',\n  17: '#9D778E',\n  18: '#EE76B9',\n  7: '#8511B9',\n  19: '#827F50',\n  22: '#488A6F',\n  24: '#FED1BB',\n  5: '#220985',\n  1: '#CA825A',\n  14: '#F3D364',\n  4: '#740F34',\n  15: '#4D836D',\n  6: '#1139C3',\n  9: '#A2490B',\n  12: '#2D953D',\n  13: '#C36E52',\n  20: '#DC7A54',\n  21: '#698317',\n  8: '#9F2B33',\n  23: '#845FE0',\n  11: '#1F8771'\n};\nfunction generateWords(w, notLetters) {\n  // w = w.toUpperCase();\n  // notLetters = notLetters.toUpperCase();\n  const words = data.words;\n  var wordsFnd = [];\n  var no_letters_pattern;\n  if (notLetters.length < 1) {\n    no_letters_pattern = new RegExp(\"^[^]*$\");\n  } else {\n    no_letters_pattern = new RegExp(\"^[^\" + notLetters + \"]*$\");\n  }\n  var pattern = new RegExp(w, 'g');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(pattern) != null && words[i].match(pattern)[0].length == words[i].length && words[i].match(no_letters_pattern) != null) {\n      const word = words[i][0].toUpperCase() + words[i].slice(1, words[i].length).toLowerCase();\n      wordsFnd.push(word);\n    } else {\n      // alert(\"Couldn't find it!\")\n    }\n  }\n  return wordsFnd;\n}\nfunction Hangman() {\n  _s();\n  const [word, setWord] = useState(\"\");\n  const [notLetters, setNotLetters] = useState(\"\");\n  const [wordLen, setWordLength] = useState(0);\n  var wordsFND;\n  const ChangeValue = event => {\n    setWord(event.target.value);\n    setWordLength(word.length);\n  };\n  const ChangeNotLetter = event => {\n    setNotLetters(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"pt-5 pb-5\",\n        children: \"This game is to see available choices for your hangman round. Replace missing letters with dots. If there are letters that are not in the word, make sure to put it in the second input box and don't seperate each letter with a comma: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-md-center\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xs: true,\n          lg: \"5\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Word:\",\n            value: word,\n            onChange: ChangeValue,\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-md-center mt-3 mb-3\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xs: true,\n          lg: \"5\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Letters not in word: \",\n            value: notLetters,\n            onChange: ChangeNotLetter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: generateWords(word, notLetters).map((w, i) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          action: true,\n          className: \"text-primary\",\n          children: w\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Hangman, \"33aPfgN9PcSlhX1qdx12I8HaDCM=\");\n_c = Hangman;\nexport default Hangman;\nvar _c;\n$RefreshReg$(_c, \"Hangman\");","map":{"version":3,"names":["useState","data","Button","Col","Form","InputGroup","Row","Container","ListGroup","jsxDEV","_jsxDEV","Fragment","_Fragment","colorDict","generateWords","w","notLetters","words","wordsFnd","no_letters_pattern","length","RegExp","pattern","i","match","word","toUpperCase","slice","toLowerCase","push","Hangman","_s","setWord","setNotLetters","wordLen","setWordLength","wordsFND","ChangeValue","event","target","value","ChangeNotLetter","children","className","fileName","_jsxFileName","lineNumber","columnNumber","xs","lg","Control","type","placeholder","onChange","autoFocus","map","Item","action","_c","$RefreshReg$"],"sources":["/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Hangman.js"],"sourcesContent":["import { useState } from \"react\";\nimport data from './data.json'\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Row from 'react-bootstrap/Row';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nimport \"./App.css\"\n\n\nvar colorDict = {\n    3: '#6D3705',\n    2: '#D1F2B3',\n    10: '#9955E7',\n    16: '#716EA1',\n    17: '#9D778E',\n    18: '#EE76B9',\n    7: '#8511B9',\n    19: '#827F50',\n    22: '#488A6F',\n    24: '#FED1BB',\n    5: '#220985',\n    1: '#CA825A',\n    14: '#F3D364',\n    4: '#740F34',\n    15: '#4D836D',\n    6: '#1139C3',\n    9: '#A2490B',\n    12: '#2D953D',\n    13: '#C36E52',\n    20: '#DC7A54',\n    21: '#698317',\n    8: '#9F2B33',\n    23: '#845FE0',\n    11: '#1F8771'\n}\n\n\nfunction generateWords(w, notLetters) {\n    // w = w.toUpperCase();\n    // notLetters = notLetters.toUpperCase();\n    const words = data.words;\n    var wordsFnd = [];\n    var no_letters_pattern;\n    if (notLetters.length < 1) {\n\n        no_letters_pattern = new RegExp(\"^[^]*$\");\n    } else {\n        no_letters_pattern = new RegExp(\"^[^\" + notLetters + \"]*$\");\n    }\n    var pattern = new RegExp(w, 'g');\n    for (let i = 0; i < words.length; i++) {\n\n\n        if (words[i].match(pattern) != null && words[i].match(pattern)[0].length == words[i].length && words[i].match(no_letters_pattern) != null) {\n            const word = words[i][0].toUpperCase() + words[i].slice(1, words[i].length).toLowerCase();\n            wordsFnd.push(word)\n        } else {\n            // alert(\"Couldn't find it!\")\n        }\n\n\n\n    }\n\n    return wordsFnd;\n\n\n}\n\nfunction Hangman() {\n\n    const [word, setWord] = useState(\"\")\n    const [notLetters, setNotLetters] = useState(\"\")\n    const [wordLen, setWordLength] = useState(0)\n    var wordsFND;\n    const ChangeValue = (event) => {\n        setWord(event.target.value);\n        setWordLength(word.length)\n\n    }\n\n    const ChangeNotLetter = (event) => {\n        setNotLetters(event.target.value);\n\n\n    }\n\n\n\n    return (\n        <>\n\n\n            <Container>\n                <h1 className=\"pt-5 pb-5\">This game is to see available choices for your hangman round. Replace missing letters with dots. If there are letters that are not in the word, make sure to put it in the second input box and don't seperate each letter with a comma: </h1>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"5\"><Form.Control type=\"text\" placeholder=\"Word:\" value={word} onChange={ChangeValue} autoFocus /></Col>\n\n                </Row>\n\n                <Row className=\"justify-content-md-center mt-3 mb-3\">\n                    <Col xs lg=\"5\"><Form.Control type=\"text\" placeholder=\"Letters not in word: \" value={notLetters} onChange={ChangeNotLetter} /></Col>\n                </Row>\n                <ListGroup>\n                    {\n                        generateWords(word, notLetters).map((w, i) => (\n\n                            <ListGroup.Item key={i} action className=\"text-primary\">{w}</ListGroup.Item>\n\n\n\n\n                        ))\n                    }\n                </ListGroup>\n            </Container>\n\n\n        </>\n    )\n}\n\nexport default Hangman; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}