{"ast":null,"code":"var _jsxFileName = \"/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Hangman.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport data from './data.json';\nimport \"./App.css\";\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar colorDict = {\n  3: '#6D3705',\n  2: '#D1F2B3',\n  10: '#9955E7',\n  16: '#716EA1',\n  17: '#9D778E',\n  18: '#EE76B9',\n  7: '#8511B9',\n  19: '#827F50',\n  22: '#488A6F',\n  24: '#FED1BB',\n  5: '#220985',\n  1: '#CA825A',\n  14: '#F3D364',\n  4: '#740F34',\n  15: '#4D836D',\n  6: '#1139C3',\n  9: '#A2490B',\n  12: '#2D953D',\n  13: '#C36E52',\n  20: '#DC7A54',\n  21: '#698317',\n  8: '#9F2B33',\n  23: '#845FE0',\n  11: '#1F8771'\n};\nfunction generateWords(w, notLetters) {\n  // w = w.toUpperCase();\n  // notLetters = notLetters.toUpperCase();\n  const words = data.words;\n  var wordsFnd = [];\n  var no_letters_pattern;\n  if (notLetters.length < 1) {\n    no_letters_pattern = new RegExp(\"^[^]*$\");\n  } else {\n    no_letters_pattern = new RegExp(\"^[^\" + notLetters + \"]*$\");\n  }\n  var pattern = new RegExp(w, 'g');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(pattern) != null && words[i].match(pattern)[0].length == words[i].length && words[i].match(no_letters_pattern) != null) {\n      const word = words[i][0].toUpperCase() + words[i].slice(1, words[i].length).toLowerCase();\n      wordsFnd.push(word);\n    } else {\n      // alert(\"Couldn't find it!\")\n    }\n  }\n  return wordsFnd;\n}\nfunction Hangman() {\n  _s();\n  const [word, setWord] = useState(\"\");\n  const [notLetters, setNotLetters] = useState(\"\");\n  const [wordLen, setWordLength] = useState(0);\n  var wordsFND;\n  const ChangeValue = event => {\n    setWord(event.target.value);\n    setWordLength(word.length);\n  };\n  const ChangeNotLetter = event => {\n    setNotLetters(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"This game is to see available choices for your hangman round. Replace missing letters with dots. If there are letters that are not in the word, make sure to put it in the second input box and don't seperate each letter with a comma: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"First name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Last name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n      placeholder: \"Your word: \",\n      value: word,\n      onChange: ChangeValue,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Letters that are not in the word:\",\n      value: notLetters,\n      onChange: ChangeNotLetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: generateWords(word, notLetters).map((w, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          color: colorDict.wordLen\n        },\n        children: w\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Hangman, \"33aPfgN9PcSlhX1qdx12I8HaDCM=\");\n_c = Hangman;\nexport default Hangman;\nvar _c;\n$RefreshReg$(_c, \"Hangman\");","map":{"version":3,"names":["useState","data","Col","Form","Row","jsxDEV","_jsxDEV","Fragment","_Fragment","colorDict","generateWords","w","notLetters","words","wordsFnd","no_letters_pattern","length","RegExp","pattern","i","match","word","toUpperCase","slice","toLowerCase","push","Hangman","_s","setWord","setNotLetters","wordLen","setWordLength","wordsFND","ChangeValue","event","target","value","ChangeNotLetter","children","fileName","_jsxFileName","lineNumber","columnNumber","Group","className","Control","placeholder","onChange","autoFocus","map","style","color","_c","$RefreshReg$"],"sources":["/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Hangman.js"],"sourcesContent":["import { useState } from \"react\";\nimport data from './data.json'\nimport \"./App.css\"\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\n\nvar colorDict = {\n    3: '#6D3705',\n    2: '#D1F2B3',\n    10: '#9955E7',\n    16: '#716EA1',\n    17: '#9D778E',\n    18: '#EE76B9',\n    7: '#8511B9',\n    19: '#827F50',\n    22: '#488A6F',\n    24: '#FED1BB',\n    5: '#220985',\n    1: '#CA825A',\n    14: '#F3D364',\n    4: '#740F34',\n    15: '#4D836D',\n    6: '#1139C3',\n    9: '#A2490B',\n    12: '#2D953D',\n    13: '#C36E52',\n    20: '#DC7A54',\n    21: '#698317',\n    8: '#9F2B33',\n    23: '#845FE0',\n    11: '#1F8771'\n}\n\n\nfunction generateWords(w, notLetters) {\n    // w = w.toUpperCase();\n    // notLetters = notLetters.toUpperCase();\n    const words = data.words;\n    var wordsFnd = [];\n    var no_letters_pattern;\n    if (notLetters.length < 1) {\n\n        no_letters_pattern = new RegExp(\"^[^]*$\");\n    } else {\n        no_letters_pattern = new RegExp(\"^[^\" + notLetters + \"]*$\");\n    }\n    var pattern = new RegExp(w, 'g');\n    for (let i = 0; i < words.length; i++) {\n\n\n        if (words[i].match(pattern) != null && words[i].match(pattern)[0].length == words[i].length && words[i].match(no_letters_pattern) != null) {\n            const word = words[i][0].toUpperCase() + words[i].slice(1, words[i].length).toLowerCase();\n            wordsFnd.push(word)\n        } else {\n            // alert(\"Couldn't find it!\")\n        }\n\n\n\n    }\n\n    return wordsFnd;\n\n\n}\n\nfunction Hangman() {\n\n    const [word, setWord] = useState(\"\")\n    const [notLetters, setNotLetters] = useState(\"\")\n    const [wordLen, setWordLength] = useState(0)\n    var wordsFND;\n    const ChangeValue = (event) => {\n        setWord(event.target.value);\n        setWordLength(word.length)\n\n    }\n\n    const ChangeNotLetter = (event) => {\n        setNotLetters(event.target.value);\n\n\n    }\n\n\n\n    return (\n        <>\n            <h1>This game is to see available choices for your hangman round. Replace missing letters with dots. If there are letters that are not in the word, make sure to put it in the second input box and don't seperate each letter with a comma: </h1>\n            <Form>\n                <Form.Group>\n                    <Row className=\"mb-3\">\n                        <Col>\n                            <Form.Control placeholder=\"First name\" />\n                        </Col>\n                        <Col>\n                            <Form.Control placeholder=\"Last name\" />\n                        </Col>\n                    </Row>\n                </Form.Group>\n            </Form>\n            <Form.Control placeholder=\"Your word: \" value={word} onChange={ChangeValue} autoFocus />\n            <br /><br />\n            <input placeholder=\"Letters that are not in the word:\" value={notLetters} onChange={ChangeNotLetter} />\n\n            <ul>\n                {\n                    generateWords(word, notLetters).map((w, i) => (\n\n                        <li key={i} style={{ color: colorDict.wordLen }}>{w}</li>\n\n\n\n\n                    ))\n                }\n            </ul>\n        </>\n    )\n}\n\nexport default Hangman; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}