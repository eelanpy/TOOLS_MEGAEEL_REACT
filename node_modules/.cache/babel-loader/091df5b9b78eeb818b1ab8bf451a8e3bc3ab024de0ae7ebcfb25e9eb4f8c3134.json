{"ast":null,"code":"var _jsxFileName = \"/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Hangman.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport data from './data.json';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import \"./App.css\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction generateWords(w, notLetters) {\n  try {\n    w = w.toLowerCase();\n    notLetters = notLetters.toLowerCase();\n    var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n    const words = data.words;\n    var wordsFnd = [];\n    var no_letters_pattern;\n    if (notLetters.length < 1) {\n      no_letters_pattern = new RegExp('^[^]*$');\n    } else {\n      no_letters_pattern = new RegExp('^[^' + notLetters + ']*$');\n    }\n    var pattern = new RegExp(w, 'g');\n    for (let i = 0; i < words.length; i++) {\n      if (words[i].match(pattern) != null && words[i].match(pattern)[0].length == words[i].length && words[i].match(no_letters_pattern) != null) {\n        const word = words[i][0].toUpperCase() + words[i].slice(1, words[i].length).toLowerCase();\n        wordsFnd.push(word);\n      } else {\n        // alert(\"Couldn't find it!\")\n      }\n    }\n    return wordsFnd;\n  } catch {\n    return [];\n  }\n}\nfunction Hangman() {\n  _s();\n  const [word, setWord] = useState('');\n  const [notLetters, setNotLetters] = useState('');\n  const [wordLen, setWordLength] = useState(0);\n  var wordsFND;\n  const ChangeValue = event => {\n    setWord(event.target.value);\n    setWordLength(word.length);\n  };\n  const ChangeNotLetter = event => {\n    setNotLetters(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"mt-4\",\n        style: ({\n          textDecorationLine: 'underline'\n        }, {\n          fontWeight: 'bold'\n        }),\n        children: \"Hangman Cheatsheet:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"mt-1 mb-5\",\n        children: [\"This game is to see available choices for your hangman round(Make sure you put some letters like vowels first before checking). Replace missing letters with dots. If there are letters that are not in the word, make sure to put it in the second input box and don't seperate each letter with a comma:\", ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-md-center\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xs: true,\n          lg: \"5\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Word:\",\n            value: word,\n            onChange: ChangeValue,\n            pattern: \"^[a-zA-Z]*$\",\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-md-center mt-3 mb-3\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xs: true,\n          lg: \"5\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Letters not in word: \",\n            value: notLetters,\n            onChange: ChangeNotLetter,\n            pattern: \"^[a-zA-Z]*$\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: generateWords(word, notLetters).map((w, i) => /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-md-center mt-1\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            xs: \"true\",\n            lg: \"5\",\n            children: /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              xs: \"true\",\n              lg: \"2\",\n              variant: \"primary\",\n              children: w\n            }, i.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)\n        }, i.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Hangman, \"JQ2fdXCrr7CH1mathnKidH3CH64=\");\n_c = Hangman;\nexport default Hangman;\nvar _c;\n$RefreshReg$(_c, \"Hangman\");","map":{"version":3,"names":["useState","data","Col","Form","Row","Container","ListGroup","jsxDEV","_jsxDEV","Fragment","_Fragment","generateWords","w","notLetters","toLowerCase","format","words","wordsFnd","no_letters_pattern","length","RegExp","pattern","i","match","word","toUpperCase","slice","push","Hangman","_s","setWord","setNotLetters","wordLen","setWordLength","wordsFND","ChangeValue","event","target","value","ChangeNotLetter","children","className","style","textDecorationLine","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","xs","lg","Control","type","placeholder","onChange","autoFocus","map","Item","variant","toString","_c","$RefreshReg$"],"sources":["/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Hangman.js"],"sourcesContent":["import { useState } from 'react'\nimport data from './data.json'\n\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\n\nimport Container from 'react-bootstrap/Container'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n// import \"./App.css\"\n\nfunction generateWords (w, notLetters) {\n  try {\n    w = w.toLowerCase()\n\n    notLetters = notLetters.toLowerCase()\n    var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n\n    const words = data.words\n    var wordsFnd = []\n    var no_letters_pattern\n    if (notLetters.length < 1) {\n      no_letters_pattern = new RegExp('^[^]*$')\n    } else {\n      no_letters_pattern = new RegExp('^[^' + notLetters + ']*$')\n    }\n    var pattern = new RegExp(w, 'g')\n    for (let i = 0; i < words.length; i++) {\n      if (\n        words[i].match(pattern) != null &&\n        words[i].match(pattern)[0].length == words[i].length &&\n        words[i].match(no_letters_pattern) != null\n      ) {\n        const word =\n          words[i][0].toUpperCase() +\n          words[i].slice(1, words[i].length).toLowerCase()\n        wordsFnd.push(word)\n      } else {\n        // alert(\"Couldn't find it!\")\n      }\n    }\n\n    return wordsFnd\n  } catch {\n    return []\n  }\n}\n\nfunction Hangman () {\n  const [word, setWord] = useState('')\n  const [notLetters, setNotLetters] = useState('')\n  const [wordLen, setWordLength] = useState(0)\n  var wordsFND\n  const ChangeValue = event => {\n    setWord(event.target.value)\n    setWordLength(word.length)\n  }\n\n  const ChangeNotLetter = event => {\n    setNotLetters(event.target.value)\n  }\n\n  return (\n    <>\n      <Container>\n        <h1\n          className='mt-4'\n          style={({ textDecorationLine: 'underline' }, { fontWeight: 'bold' })}\n        >\n          Hangman Cheatsheet:\n        </h1>\n        <h2 className='mt-1 mb-5'>\n          This game is to see available choices for your hangman round(Make sure\n          you put some letters like vowels first before checking). Replace\n          missing letters with dots. If there are letters that are not in the\n          word, make sure to put it in the second input box and don't seperate\n          each letter with a comma:{' '}\n        </h2>\n        <Row className='justify-content-md-center'>\n          <Col xs lg='5'>\n            <Form.Control\n              type='text'\n              placeholder='Word:'\n              value={word}\n              onChange={ChangeValue}\n              pattern='^[a-zA-Z]*$'\n              autoFocus\n            />\n          </Col>\n        </Row>\n\n        <Row className='justify-content-md-center mt-3 mb-3'>\n          <Col xs lg='5'>\n            <Form.Control\n              type='text'\n              placeholder='Letters not in word: '\n              value={notLetters}\n              onChange={ChangeNotLetter}\n              pattern='^[a-zA-Z]*$'\n            />\n          </Col>\n        </Row>\n        <ListGroup>\n          {generateWords(word, notLetters).map((w, i) => (\n            <Row className='justify-content-md-center mt-1' key={i.toString()}>\n              <Col xs='true' lg='5'>\n                <ListGroup.Item\n                  xs='true'\n                  lg='2'\n                  key={i.toString()}\n                  variant='primary'\n                >\n                  {w}\n                </ListGroup.Item>\n              </Col>\n            </Row>\n          ))}\n        </ListGroup>\n      </Container>\n    </>\n  )\n}\n\nexport default Hangman\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}