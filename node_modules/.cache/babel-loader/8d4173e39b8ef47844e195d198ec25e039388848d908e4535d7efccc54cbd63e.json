{"ast":null,"code":"var _jsxFileName = \"/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Number.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport data from './data.json';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport { createElement } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import \"./App.css\"\n\n// function generateWords (w, notLetters) {\n//   w = w.toLowerCase()\n\n//   notLetters = notLetters.toLowerCase()\n//   var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n\n//   const words = data.words\n//   var wordsFnd = []\n//   var no_letters_pattern\n//   if (notLetters.length < 1) {\n//     no_letters_pattern = new RegExp('^[^]*$')\n//   } else {\n//     no_letters_pattern = new RegExp('^[^' + notLetters + ']*$')\n//   }\n//   var pattern = new RegExp(w, 'g')\n//   for (let i = 0; i < words.length; i++) {\n//     if (\n//       words[i].match(pattern) != null &&\n//       words[i].match(pattern)[0].length == words[i].length &&\n//       words[i].match(no_letters_pattern) != null\n//     ) {\n//       const word =\n//         words[i][0].toUpperCase() +\n//         words[i].slice(1, words[i].length).toLowerCase()\n//       wordsFnd.push(word)\n//     } else {\n//       // alert(\"Couldn't find it!\")\n//     }\n//   }\n\n//   return wordsFnd\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction LetUserPick(props) {\n  console.log(props.num);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: 'text'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = LetUserPick;\nfunction Number() {\n  _s();\n  const [max, setMax] = useState('');\n  const [isChecked, setChecked] = useState(false);\n  const nums = [{\n    value: 10\n  }, {\n    value: 25\n  }, {\n    value: 50\n  }, {\n    value: 100\n  }, {\n    value: 500\n  }, {\n    value: 1000\n  }];\n  const change = e => {\n    setMax(parseInt(e.target.value));\n    setChecked(true);\n  };\n  useEffect(() => {\n    generateRandomNum(max);\n  }, [max]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pick a number:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-md-center\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        lg: \"6\",\n        children: nums.map((num, idx) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(ToggleButton, {\n            className: \"m-2\",\n            id: `radio-${idx}`,\n            type: \"radio\",\n            variant: \"outline-primary\",\n            name: \"radio\",\n            value: num.value,\n            checked: max === parseInt(num.value),\n            onChange: e => change(e),\n            disabled: isChecked,\n            children: num.value\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)\n        }, void 0, false))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(Number, \"H/ZQ8zNiQD0S1XWw1ahb7y0+CvM=\");\n_c2 = Number;\nconst generateRandomNum = max => {\n  const num = max;\n  var randomNum = Math.floor(Math.random() * (num - 1)) + 1;\n  if (randomNum % 5 == 0) {\n    randomNum = Math.floor(Math.random() * (num - 1)) + 1;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\nexport default Number;\nvar _c, _c2;\n$RefreshReg$(_c, \"LetUserPick\");\n$RefreshReg$(_c2, \"Number\");","map":{"version":3,"names":["useEffect","useState","data","Col","Form","Row","Container","ButtonGroup","ToggleButton","createElement","jsxDEV","_jsxDEV","Fragment","_Fragment","LetUserPick","props","console","log","num","children","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","Number","_s","max","setMax","isChecked","setChecked","nums","value","change","e","parseInt","target","generateRandomNum","className","lg","map","idx","id","variant","name","checked","onChange","disabled","_c2","randomNum","Math","floor","random","$RefreshReg$"],"sources":["/Users/eelank/TOOLS_MEGAEEL_REACT/megaeel/src/Number.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport data from './data.json'\n\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\n\nimport Container from 'react-bootstrap/Container'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport { createElement } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n// import \"./App.css\"\n\n// function generateWords (w, notLetters) {\n//   w = w.toLowerCase()\n\n//   notLetters = notLetters.toLowerCase()\n//   var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n\n//   const words = data.words\n//   var wordsFnd = []\n//   var no_letters_pattern\n//   if (notLetters.length < 1) {\n//     no_letters_pattern = new RegExp('^[^]*$')\n//   } else {\n//     no_letters_pattern = new RegExp('^[^' + notLetters + ']*$')\n//   }\n//   var pattern = new RegExp(w, 'g')\n//   for (let i = 0; i < words.length; i++) {\n//     if (\n//       words[i].match(pattern) != null &&\n//       words[i].match(pattern)[0].length == words[i].length &&\n//       words[i].match(no_letters_pattern) != null\n//     ) {\n//       const word =\n//         words[i][0].toUpperCase() +\n//         words[i].slice(1, words[i].length).toLowerCase()\n//       wordsFnd.push(word)\n//     } else {\n//       // alert(\"Couldn't find it!\")\n//     }\n//   }\n\n//   return wordsFnd\n// }\n\nfunction LetUserPick (props) {\n  console.log(props.num)\n  return (\n    <>\n      <input type={'text'} />\n    </>\n  )\n}\n\nfunction Number () {\n  const [max, setMax] = useState('')\n  const [isChecked, setChecked] = useState(false)\n\n  const nums = [\n    { value: 10 },\n    { value: 25 },\n    { value: 50 },\n    { value: 100 },\n    { value: 500 },\n    { value: 1000 }\n  ]\n\n  const change = e => {\n    setMax(parseInt(e.target.value))\n    setChecked(true)\n  }\n\n  useEffect(() => {\n    generateRandomNum(max)\n  }, [max])\n\n  return (\n    <Container>\n      <h1>Pick a number:</h1>\n      <Row className='justify-content-md-center'>\n        <Col lg='6'>\n          {nums.map((num, idx) => (\n            <>\n              <ToggleButton\n                key={idx}\n                className='m-2'\n                id={`radio-${idx}`}\n                type='radio'\n                variant='outline-primary'\n                name='radio'\n                value={num.value}\n                checked={max === parseInt(num.value)}\n                onChange={e => change(e)}\n                disabled={isChecked}\n              >\n                {num.value}\n              </ToggleButton>\n            </>\n          ))}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst generateRandomNum = max => {\n  const num = max\n  var randomNum = Math.floor(Math.random() * (num - 1)) + 1\n  if (randomNum % 5 == 0) {\n    randomNum = Math.floor(Math.random() * (num - 1)) + 1\n  }\n\n  return (\n    <>\n      <input type='text' />\n    </>\n  )\n}\n\nexport default Number\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}